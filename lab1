#include <iostream>
#include <string>

using namespace std;

class LinkedList {
private:
    struct Node {
        string name;
        int age;
        double salary;
        Node* next;

        Node(const string& name, int age, double salary) 
            : name(name), age(age), salary(salary), next(nullptr) {}
    };

    Node* head;

public:
    LinkedList() : head(nullptr) {}

    ~LinkedList() {
        clear();
    }

    // Добавление элемента в начало списка
    void addToBeginning(const string& name, int age, double salary) {
        Node* newNode = new Node(name, age, salary);
        newNode->next = head;
        head = newNode;
    }

    // Добавление элемента в конец списка
    void addToEnd(const string& name, int age, double salary) {
        Node* newNode = new Node(name, age, salary);
        if (!head) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next) {
            temp = temp->next;
        }
        temp->next = newNode;
    }

    // Добавление элемента после заданного элемента
    void addAfter(const string& afterName, const string& name, int age, double salary) {
        Node* temp = head;
        while (temp && temp->name != afterName) {
            temp = temp->next;
        }
        if (temp) {
            Node* newNode = new Node(name, age, salary);
            newNode->next = temp->next;
            temp->next = newNode;
        } else {
            cout << "Элемент с именем " << afterName << " не найден.\n";
        }
    }

    // Добавление элемента перед заданным элементом
    void addBefore(const string& beforeName, const string& name, int age, double salary) {
        if (!head) {
            cout << "Список пуст.\n";
            return;
        }

        if (head->name == beforeName) {
            addToBeginning(name, age, salary);
            return;
        }

        Node* temp = head;
        while (temp->next && temp->next->name != beforeName) {
            temp = temp->next;
        }

        if (temp->next) {
            Node* newNode = new Node(name, age, salary);
            newNode->next = temp->next;
            temp->next = newNode;
        } else {
            cout << "Элемент с именем " << beforeName << " не найден.\n";
        }
    }

    // Удаление элемента по имени
    void deleteByName(const string& name) {
        if (!head) {
            cout << "Список пуст.\n";
            return;
        }

        if (head->name == name) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }

        Node* temp = head;
        while (temp->next && temp->next->name != name) {
            temp = temp->next;
        }

        if (temp->next) {
            Node* nodeToDelete = temp->next;
            temp->next = temp->next->next;
            delete nodeToDelete;
        } else {
            cout << "Элемент с именем " << name << " не найден.\n";
        }
    }

    // Вывод списка
    void printList() const {
        Node* temp = head;
        while (temp) {
            cout << "Имя: " << temp->name << ", Возраст: " << temp->age 
                 << ", Зарплата: " << temp->salary << '\n';
            temp = temp->next;
        }
    }

    // Очистка списка
    void clear() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }
};

int main() {
    LinkedList list;

    // Добавление элементов в список
    list.addToEnd("Иван", 30, 50000.0);
    list.addToBeginning("Мария", 25, 45000.0);
    list.addToEnd("Петр", 35, 55000.0);
    list.addAfter("Мария", "Анна", 28, 48000.0);
    list.addBefore("Петр", "Сергей", 40, 60000.0);

    // Вывод списка
    cout << "Список после добавления элементов:\n";
    list.printList();

    // Удаление элемента
    list.deleteByName("Анна");
    cout << "Список после удаления элемента с именем Анна:\n";
    list.printList();

    return 0;
}
