#include <iostream>
#include <string>

using namespace std;

// Узел списка
struct Node {
    string name;
    int age;
    double score;
    Node* next;

    Node(string n, int a, double s, Node* nextNode = nullptr) 
        : name(n), age(a), score(s), next(nextNode) {}
};

// Односвязный список
class LinkedList {
private:
    Node* head = nullptr;

public:
    ~LinkedList() { clear(); }

    // Добавление в начало списка
    void addToFront(string name, int age, double score) {
        head = new Node(name, age, score, head);
    }

    // Добавление в конец списка
    void addToEnd(string name, int age, double score) {
        if (!head) {
            addToFront(name, age, score);
            return;
        }
        Node* temp = head;
        while (temp->next) temp = temp->next;
        temp->next = new Node(name, age, score);
    }

    // Добавление элемента после заданного имени
    void addAfter(string target, string name, int age, double score) {
        for (Node* temp = head; temp; temp = temp->next) {
            if (temp->name == target) {
                temp->next = new Node(name, age, score, temp->next);
                return;
            }
        }
    }

    // Добавление перед заданным именем
    void addBefore(string target, string name, int age, double score) {
        if (!head || head->name == target) {
            addToFront(name, age, score);
            return;
        }
        for (Node* temp = head; temp->next; temp = temp->next) {
            if (temp->next->name == target) {
                temp->next = new Node(name, age, score, temp->next);
                return;
            }
        }
    }

    // Удаление по имени
    void removeByName(string target) {
        if (!head) return;
        if (head->name == target) {
            Node* toDelete = head;
            head = head->next;
            delete toDelete;
            return;
        }
        for (Node* temp = head; temp->next; temp = temp->next) {
            if (temp->next->name == target) {
                Node* toDelete = temp->next;
                temp->next = temp->next->next;
                delete toDelete;
                return;
            }
        }
    }

    // Вывод списка
    void display() const {
        for (Node* temp = head; temp; temp = temp->next)
            cout << temp->name << ", " << temp->age << ", " << temp->score << endl;
    }

    // Очистка памяти
    void clear() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }
};

// Тестирование списка
int main() {
    LinkedList list;
    list.addToFront("Alice", 25, 85.5);
    list.addToEnd("Bob", 30, 90.2);
    list.addToEnd("Charlie", 28, 78.9);
    list.display();

    cout << "----" << endl;
    list.addAfter("Alice", "David", 27, 88.1);
    list.addBefore("Charlie", "Eve", 22, 92.3);
    list.display();

    cout << "----" << endl;
    list.removeByName("Bob");
    list.display();

    return 0;
}
